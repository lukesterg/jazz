import { number, createModels, meta, foreignKey } from '../model';

test('Model WithoutPrimaryKey CreatesPrimaryKey', () => {
  const finalModel = createModels({ class: {} });
  const primaryKeys = Object.values(finalModel.class).filter((i) => i.primaryKey);
  expect(primaryKeys.length).toBe(1);
  expect(finalModel.class[meta].primaryKey).toBeDefined();
});

test('Model WithPrimaryKey DoesNotCreateAnotherPrimaryKey', () => {
  const finalModel = createModels({
    class: {
      primary: number({ primaryKey: true }),
    },
  });
  const primaryKeys = Object.values(finalModel.class).filter((i) => i.primaryKey);
  expect(primaryKeys.length).toBe(1);
  expect(finalModel.class[meta].primaryKey).toBe('primary');
});

test('Model WithTwoPrimaryKeys Fails', () => {
  expect(() =>
    createModels({
      class: {
        firstPrimaryKey: number({ primaryKey: true, autoGenerated: true }),
        secondPrimaryKey: number({ primaryKey: true, autoGenerated: true }),
      },
    })
  ).toThrow();
});
